@using POC.Helper

@model POC.Models.Chat

<div class="container">
    <div id="UserList">
    </div>
    @Html.ListBoxFor(a => a.SelectedUserIds, Extensions.MakeMultiSelectList(Model.Users), new { @class = "form-control", @multiple = "multiple" })

    Room: <input type="text" id="room" />
    <input type="button" id="join" value="Join" />
    <p>Message: <input type="text" id="message" /></p>
    <p>
        <input type="button" id="sendmessage" value="Send to All" />
        <input type="button" id="sendprivate" value="Send to Room" />
    </p>
    <input type="hidden" id="displayname" />
    <ul id="discussion"></ul>
    
</div>
<div>
    @*Begin Added Code for new multiselect list*@
    <link rel="stylesheet" type="text/css" href="~/Content/normalize.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/component.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/demo.css" />
    <script src="~/Scripts/modernizr.custom.js"></script>
    <section>
        <form class="me-select">
            <ul id="me-select-list">
                <li><input id="cb1" name="cb1" type="checkbox"><label for="cb1"><span>Alex</span></label></li>
                <li><input id="cb2" name="cb2" type="checkbox"><label for="cb2"><span>Joey</span></label></li>
                <li><input id="cb3" name="cb3" type="checkbox"><label for="cb3"><span>David</span></label></li>
                <li><input id="cb4" name="cb4" type="checkbox"><label for="cb4"><span>Matthew</span></label></li>
                <li><input id="cb5" name="cb5" type="checkbox"><label for="cb5"><span>Jim</span></label></li>
                <li><input id="cb6" name="cb6" type="checkbox"><label for="cb6"><span>Emily</span></label></li>
            </ul>
        </form>
    </section>
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. *REFERENCE TO PROXY FILE* -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script src="~/Scripts/magicselection.js"></script>
     <!-- Reference to multiselect listbox script -->
    <script>
        $(function () {
            $("#SelectedUserIds").multiselect({ numberDisplayed: 1 });

            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.Chat;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function(name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            chat.client.newMessage = function(name, message, roomId) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + roomId + " " + htmlEncode(message) + '</li>');
            };

            chat.client.isUserInRoom = function (users, roomId, fromName, message) {
                var usersSplit = users.split(";");
                $.each(usersSplit, function (key, value) {
                    // are you in this list for this room?
                    if ($('#displayname').val() === value) {
                        // you are part of this chat room
                        //Joining the room
                        // TODO: Open a new browser window

                        chat.server.joinRoom($('#displayname').val(), roomId);
                        $('#discussion').append('<li><strong>' + htmlEncode(fromName)
                            + '</strong>: ' + roomId + " " + htmlEncode(message) + '</li>');
                    }
                });
            };

            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function() {
                $('#sendmessage').click(function() {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus Joeyfor next comment.
                    $('#message').val('').focus();
                });
                //Joining a Room
                $('#join').click(function () {
                    var items = [];
                    $('#selectedItems option:selected').each(function () { items.push($(this).text()); });
                    var usersToChatWith = items.join(';');

                    //Joining the room
                    chat.server.joinRoom($('#displayname').val(), usersToChatWith, $('#room').val());
                });
                $('#sendprivate').click(function() {
                    //Sending a message to just that room
                    chat.server.sendMessageToRoom($('#displayname').val(), $('#room').val(), $('#message').val());
                });
            });
        });

        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        //begin multiselect list box NEW
        (function () {
            var selList = document.getElementById('me-select-list'),
                items = selList.querySelectorAll('li');

            // fill the initial checked elements (mozilla)
            [].slice.call(items).forEach(function (el) {
                el.parentNode.className = el.checked ? 'selected' : '';
            });

            function checkUncheck(el) {
                el.parentNode.className = el.checked ? '' : 'selected';
                el.checked = !el.checked;
            }

            new magicSelection(selList.querySelectorAll('li > input[type="checkbox"]'), {
                onSelection: function (el) { checkUncheck(el); },
                onClick: function (el) {
                    el.parentNode.className = el.checked ? 'selected' : '';
                }
            });

        })();
    </script>
}